package com.example.accessingdatamysql.myorg;

import com.example.accessingdatamysql.User;
import com.example.accessingdatamysql.UserRepository;
import com.example.accessingdatamysql.auth.AuthController;
import com.example.accessingdatamysql.auth.JWT;
import com.example.accessingdatamysql.org.Organization;
import jakarta.persistence.criteria.CriteriaBuilder;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;

import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Optional;

@CrossOrigin
@RestController // This means that this class is a Controller
@RequestMapping(path="/myorg") // This means URL's start with /orgauth (after Application path)
public class OrgRosterController {

    @Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private OrgRosterRepository orgRosterRepository;

    @Autowired
    private MyOrgRosterRepository myOrgRosterRepository;

    @Autowired
    private UserRepository userRepository;
    @GetMapping(path="/all")
    public @ResponseBody Iterable<OrganizationRoster> getOrgs()
    {
        return myOrgRosterRepository.findAll();
    }

    @PostMapping(path="/user")
    public @ResponseBody Map<String, Object> getUsersOrgs(@RequestBody Map<String, Object> json)
    {
        Map<String, Object> response = new HashMap<>();
        User found = new User();
        AuthController au = new AuthController();
        Map<String, String> res =  au.verify(json); // if the jwt token could not be verified
        if (res.containsKey("login") && res.get("login").equals("failed"))
        {
            response.put("result", "failed = bad token or bad request");
            return response;
        }
        Optional<User> usr = userRepository.findById(res.get("user"));
        if (!usr.isPresent())
        {
            response.put("result", "failed = user not found");
            return response;
        }
        response.put("result", "success");
        response.put("data", myOrgRosterRepository.findUserOrgs(res.get("user")));
        return response;
    }


    @PostMapping(path="/user/org")
    public @ResponseBody Map<String, Object> getUserOrg(@RequestBody Map<String, Object> json)
    {
        Map<String, Object> response = new HashMap<>();
//        System.out.println(json.get("orgId"));
        if (!json.containsKey("orgId"))
        {
            response.put("result", "failed = no orgId provided bad request");
            return response;
        }
        User found = new User();
        AuthController au = new AuthController();
        Map<String, String> res =  au.verify(json); // if the jwt token could not be verified
        if (res.containsKey("login") && res.get("login").equals("failed"))
        {
            response.put("result", "failed = bad token or bad request");
            return response;
        }
        Optional<User> usr = userRepository.findById(res.get("user"));
        if (!usr.isPresent())
        {
            response.put("result", "failed = user not found");
            return response;
        }
        if (json.get("orgId") instanceof Integer)
            return myOrgRosterRepository.findUserOrg(usr.get().getEmail(), (Integer) json.get("orgId"));
        return myOrgRosterRepository.findUserOrg(usr.get().getEmail(),  Integer.parseInt((String) json.get("orgId")));
    }

    @PostMapping(path="/user/roster")
    public @ResponseBody Map<String, Object> getRoster(@RequestBody Map<String, Object> json)
    {
        Map<String, Object> map = getUserOrg(json);
        Map<String, Object> result = new HashMap<>();
        //above, verify that this user is even supposed to see this information
        if (map.get("result").equals("success"))
        {
            result.put("result", "success");
            result.put("type", map.get("type")); //tell the client what type this user is so they can render buttons for the roster
            result.put("userEmail", map.get("userEmail"));
//            System.out.println(map.get("orgId"));
            if (json.get("orgId") instanceof Integer)
                result.put("roster", myOrgRosterRepository.getRoster((Integer) json.get("orgId")));
            else
                result.put("roster", myOrgRosterRepository.getRoster(Integer.parseInt((String) json.get("orgId"))));
            return result;
        }
        result.put("result", "failure");
        return result;
    }

    @PutMapping(path="/user/update")
    public @ResponseBody Map<String, Object> updateUser(@RequestBody Map<String, Object> json)
    {
        Map<String, Object> result = new HashMap<>();
//        System.out.println(json.entrySet());
        if (!json.containsKey("orgId") || !json.containsKey("newtype") || !json.containsKey("jwt") || !json.containsKey("memberEmail"))
        {
            result.put("result", "failure bad request");
            return result;
        }
        Map<String, Object> map = getUserOrg(json);
        //above, verify that this user is even supposed to see this information
        if (map.get("result").equals("success"))
        {
            Integer orgId;
            if (json.get("orgId") instanceof Integer)
            {
                orgId = (Integer) json.get("orgId");
            }
            else
            {
                orgId = Integer.parseInt((String)json.get("orgId"));
            }
            String userEmail = (String)map.get("userEmail");
            if ("self".equals((String)(json.get("memberEmail"))) && json.get("newtype").equals("DELETE"))
            {
                //basically if the user tries to remove themselves from the organization
                result.put("data", myOrgRosterRepository.deleteMember(orgId, userEmail));
                //above, remove the user
                if (map.get("type") == OrganizationRoster.Type.OWNER)
                {
                    //we need to promote an existing member to owner
                    result.put("data", myOrgRosterRepository.promoteRandom(orgId));
                }
                result.put("result", "success");
                return result;
            }
            else if (map.get("type") == OrganizationRoster.Type.OWNER)
            {
                if (json.get("newtype").equals("MANAGER") || json.get("newtype").equals("MEMBER"))
                {
                    //simple promotion/demotion case
                    result.put("result", "success");
                    result.put("data", myOrgRosterRepository.updateMember(orgId, (String) json.get("memberEmail"), OrganizationRoster.Type.valueOf((String)json.get("newtype"))));
                    return result;
                }
                else if (json.get("newtype").equals("DELETE"))
                {
                    result.put("result", "success");
                    result.put("data", myOrgRosterRepository.deleteMember(orgId, (String) json.get("memberEmail")));
                    return result;
                }
                else if (json.get("newtype").equals("OWNER"))
                {
                    result.put("result", "success");
                    //transferring ownership
                    result.put("data", myOrgRosterRepository.updateMember(orgId, (String) json.get("memberEmail"), OrganizationRoster.Type.valueOf((String)json.get("newtype"))));
                    myOrgRosterRepository.updateMember(orgId, (String) map.get("userEmail"), OrganizationRoster.Type.MANAGER);
                    return result;
                }
                else
                {
                    result.put("result", "failure - bad type");
                    return result;
                }
            }
            else if (map.get("type") == OrganizationRoster.Type.MANAGER)
            {
                if (json.get("newtype").equals("DELETE"))
                {
                    //delete this user, update the membercount for the org
                    result.put("data", myOrgRosterRepository.deleteMember(orgId, (String) json.get("memberEmail")));
                    return result;
                }
                else
                {
                    result.put("result", "failure - permission denied or bad type");
                    return result;
                }
            }
            else
            {
                //members cannot promote or change anyone's type
                result.put("result", "failure - permission denied");
                return result;
            }
        }
        result.put("result", "failure");
        return result;
    }
}

