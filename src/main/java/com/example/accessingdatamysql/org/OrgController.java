package com.example.accessingdatamysql.org;


import com.example.accessingdatamysql.myorg.OrgRosterRepository;
import com.example.accessingdatamysql.myorg.OrganizationRoster;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

@CrossOrigin
@RestController // This means that this class is a Controller
@RequestMapping(path="/organization") // This means URL's start with /demo (after Application path)
public class OrgController {
    
    // Which is auto-generated by Spring, we will use it to handle the data
    @Autowired
    private OrgRepository orgRepository;

    
    // Which is auto-generated by Spring, we will use it to handle the data
    @Autowired
    private OrgRosterRepository orgRosterRepository;

    @Autowired
    private CustomOrganizationRepository customOrganizationRepository;

    @PostMapping(path = "/add") // Map ONLY POST Requests
    @ResponseBody
    public Organization addJsonOrg(@RequestBody Organization org) {
        // @ResponseBody means the returned String is the response, not a view name
        // @RequestParam means it is a parameter from the GET or POST request
        Organization org2 = orgRepository.save(org);
        OrganizationRoster orgRoster = new OrganizationRoster(org2.getOwnerEmail(), org2.getOrgId(), OrganizationRoster.Type.OWNER);
        orgRosterRepository.save(orgRoster);
        return org;
    }

    @GetMapping(path="/all")
    public @ResponseBody Iterable<Organization> getAllOrgs() {
        // This returns a JSON or XML with the users
        return orgRepository.findAll();
    }

    @GetMapping(path="/all/stats/category")
    public @ResponseBody Map<String, Object> getAllOrgStatsByCategory() {
        // This returns a JSON with statistics about how many organziations are in each category
        List<Object[]> categoryCounts = customOrganizationRepository.countOrganizationsByCategory();
        Map<String, Object> response = new HashMap<>();
        // for (Object[] row : categoryCounts) {
        //     Organization.Category category = (Organization.Category) row[0];
        //     Long count = (Long) row[1];
        //     stats.put(category.toString(), count);
        // }
        response.put("data", categoryCounts);
        return response;
    }

    @GetMapping(path="/all/stats/members")
    public @ResponseBody Map<String, Object> getAllOrgStatsByMembers() {
        // This returns a JSON with statistics about how many organziations are in each category
        List<Object[]> categoryCounts = customOrganizationRepository.countOrganizationsByMemberCount();
        Map<String, Object> response = new HashMap<>();
        // for (Object[] row : categoryCounts) {
        //     Organization.Category category = (Organization.Category) row[0];
        //     Long count = (Long) row[1];
        //     stats.put(category.toString(), count);
        // }
        response.put("data", categoryCounts);
        return response;
    }

}
